outdir:5e9c3e060af33ec5dc4b348526303fdd
sampler_type:emcee
likelihood_input_type:Gaussian
abscissa_data:1 2 3 4 6
input_data:1 2 3 4 5
pyfile:#!/usr/bin/env python

# import required packages
import emcee
import numpy as np
from numpy import exp, log

# import model function from separate file
from mymodel import mymodel

# import post-processing function from theonlinemcmc package
from theonlinemcmc import *

# initialise error code value
errval = 0

# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf

  return lp + lnlike(theta, x, sigma_gauss, data)


# define the log prior function
def lnprior(theta):
  lp = 0.
  m,c = theta

  if -11 < m < 11:
    lp = 0.
  else:
    return -np.inf

  if -10 < c < 10:
    lp = 0.
  else:
    return -np.inf

  return lp


# define log likelihood function
def lnlike(theta, x, sigma_gauss, data):
  m,c = theta
  md = mymodel(m,c,x)
  return -0.5*np.sum(((md - data)/sigma_gauss)**2)


# set number of MCMC points
Nmcmc = 1000
Nburnin = 1000
Nens = 100
ndim = 2

# initialise the start ensemble points
try:
  mini = -11 + np.random.rand(Nens)*22
  cini = -10 + np.random.rand(Nens)*20
  pos = np.array([mini, cini]).T
except:
  errval = PRIOR_INIT_ERR

# read in the data
if errval == 0:
  try:
    data = np.loadtxt("data_file.txt")
  except:
    try:
      data = np.loadtxt("data_file.txt", delimiter=",")
    except:
      errval = DATA_READ_ERR


# read in the abscissa values
if errval == 0:
  try:
    x = np.loadtxt("abscissa_file.txt")
  except:
    try:
      x = np.loadtxt("abscissa_file.txt", delimiter=",")
    except:
      errval = ABSCISSA_READ_ERR


# read in sigma (standard deviation) values (there may be nothing here if it not applicable to your likelihood)

# run the MCMC
if errval == 0:
  if len(data) != len(x):
    errval = DATA_LENGTH_ERR

  argslist = (x, 0.65, data)

if errval == 0:
  # set up sampler
  try:
    sampler = emcee.EnsembleSampler(Nens, ndim, lnprob, args=argslist)
  except:
    errval = MCMC_INIT_ERR

  # run sampler
  try:
    sampler.run_mcmc(pos, Nmcmc+Nburnin)
    # remove burn-in and flatten
    samples = sampler.chain[:, Nburnin:, :].reshape((-1, ndim))
    lnp = np.reshape(sampler.lnprobability[:, Nburnin:].flatten(), (-1,1))
    samples = np.hstack((samples, lnp))
  except:
    errval = MCMC_RUN_ERR

  # output the posterior samples, likelihood and variables
  try:
    np.savetxt('posterior_samples.txt.gz', samples)
    fv = open('variables.txt', 'w')
    fv.write("m,c")
    fv.close()
  except:
    errval = POST_OUTPUT_ERR

  # run post-processing script
  try:
    postprocessing(samples, "m,c", x, "x", data, "fanatapan@yahoo.co.uk", "http://localhost/results/5e9c3e060af33ec5dc4b348526303fdd")
  except:
    errval = POST_PROCESS_ERR

success = True
if errval != 0:
  # run different script in case error codes are encountered
  errorpage(errval, "fanatapan@yahoo.co.uk", "http://localhost/results/5e9c3e060af33ec5dc4b348526303fdd")
  success = False

database_add_row("5e9c3e060af33ec5dc4b348526303fdd", "m*x+c", "m,c", 2, success)


modelfile:# import functions that can be used by the model
from numpy import pi, sin, cos, tan, exp, log, log10, log2, arccos, arcsin, arctan, arctan2, sinh, cosh, tanh, arccosh, arcsinh, arctanh
from scipy.special import erf, gamma
from scipy.misc import factorial

# define the model to fit to the data
def mymodel(m,c, x):
  
  
  return m*x+c

runcode:1




------------------------------------------------------------------





outdir:e70c04f01cb62f830754dd393e1421f4
sampler_type:emcee
likelihood_input_type:Gaussian
variables[]:m
variables[]:x
variables[]:c
abscissa_data:1 2 3 4
input_data:1 2 3 4
pyfile:#!/usr/bin/env python

# import required packages
import emcee
import numpy as np
from numpy import exp, log

# import model function from separate file
from mymodel import mymodel

# import post-processing function from theonlinemcmc package
from theonlinemcmc import *

# initialise error code value
errval = 0

# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf

  return lp + lnlike(theta, x, sigma_gauss, data)


# define the log prior function
def lnprior(theta):
  lp = 0.
  m,c = theta

  if -10 < m < 10:
    lp = 0.
  else:
    return -np.inf

  if -10 < c < 10:
    lp = 0.
  else:
    return -np.inf

  return lp


# define log likelihood function
def lnlike(theta, x, sigma_gauss, data):
  m,c = theta
  md = mymodel(m,c,x)
  return -0.5*np.sum(((md - data)/sigma_gauss)**2)


# set number of MCMC points
Nmcmc = 1000
Nburnin = 1000
Nens = 100
ndim = 2

# initialise the start ensemble points
try:
  mini = -10 + np.random.rand(Nens)*20
  cini = -10 + np.random.rand(Nens)*20
  pos = np.array([mini, cini]).T
except:
  errval = PRIOR_INIT_ERR

# read in the data
if errval == 0:
  try:
    data = np.loadtxt("data_file.txt")
  except:
    try:
      data = np.loadtxt("data_file.txt", delimiter=",")
    except:
      errval = DATA_READ_ERR


# read in the abscissa values
if errval == 0:
  try:
    x = np.loadtxt("abscissa_file.txt")
  except:
    try:
      x = np.loadtxt("abscissa_file.txt", delimiter=",")
    except:
      errval = ABSCISSA_READ_ERR


# read in sigma (standard deviation) values (there may be nothing here if it not applicable to your likelihood)

# run the MCMC
if errval == 0:
  if len(data) != len(x):
    errval = DATA_LENGTH_ERR

  argslist = (x, 0.65, data)

if errval == 0:
  # set up sampler
  try:
    sampler = emcee.EnsembleSampler(Nens, ndim, lnprob, args=argslist)
  except:
    errval = MCMC_INIT_ERR

  # run sampler
  try:
    sampler.run_mcmc(pos, Nmcmc+Nburnin)
    # remove burn-in and flatten
    samples = sampler.chain[:, Nburnin:, :].reshape((-1, ndim))
    lnp = np.reshape(sampler.lnprobability[:, Nburnin:].flatten(), (-1,1))
    samples = np.hstack((samples, lnp))
  except:
    errval = MCMC_RUN_ERR

  # output the posterior samples, likelihood and variables
  try:
    np.savetxt('posterior_samples.txt.gz', samples)
    fv = open('variables.txt', 'w')
    fv.write("m,c")
    fv.close()
  except:
    errval = POST_OUTPUT_ERR

  # run post-processing script
  try:
    postprocessing(samples, "m,c", x, "x", data, "fanatapan@yahoo.co.uk", "http://localhost/results/e70c04f01cb62f830754dd393e1421f4")
  except:
    errval = POST_PROCESS_ERR

success = True
if errval != 0:
  # run different script in case error codes are encountered
  errorpage(errval, "fanatapan@yahoo.co.uk", "http://localhost/results/e70c04f01cb62f830754dd393e1421f4")
  success = False

database_add_row("e70c04f01cb62f830754dd393e1421f4", "m*x+c", "m,c", 2, success)


modelfile:# import functions that can be used by the model
from numpy import pi, sin, cos, tan, exp, log, log10, log2, arccos, arcsin, arctan, arctan2, sinh, cosh, tanh, arccosh, arcsinh, arctanh
from scipy.special import erf, gamma
from scipy.misc import factorial

# define the model to fit to the data
def mymodel(m,c, x):
  
  
  return m*x+c

runcode:1



-----------------------------------------------------------------



outdir:4a3182dfaaf9dfd540a677b1d9c323ed
sampler_type:emcee
likelihood_input_type:Gaussian
variables[]:m
variables[]:x
variables[]:c
abscissa_data:1 2 3 4
input_data:1 2 3 4
theta[]:m
theta[]:c
pyfile:#!/usr/bin/env python

# import required packages
import emcee
import numpy as np
from numpy import exp, log

# import model function from separate file
from mymodel import mymodel

# import post-processing function from theonlinemcmc package
from theonlinemcmc import *

# initialise error code value
errval = 0

# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf

  return lp + lnlike(theta, x, sigma_gauss, data)


# define the log prior function
def lnprior(theta):
  lp = 0.
  m,c = theta

  if -10 < m < 10:
    lp = 0.
  else:
    return -np.inf

  if -10 < c < 10:
    lp = 0.
  else:
    return -np.inf

  return lp


# define log likelihood function
def lnlike(theta, x, sigma_gauss, data):
  m,c = theta
  md = mymodel(m,c,x)
  return -0.5*np.sum(((md - data)/sigma_gauss)**2)


# set number of MCMC points
Nmcmc = 1000
Nburnin = 1000
Nens = 100
ndim = 2

# initialise the start ensemble points
try:
  mini = -10 + np.random.rand(Nens)*20
  cini = -10 + np.random.rand(Nens)*20
  pos = np.array([mini, cini]).T
except:
  errval = PRIOR_INIT_ERR

# read in the data
if errval == 0:
  try:
    data = np.loadtxt("data_file.txt")
  except:
    try:
      data = np.loadtxt("data_file.txt", delimiter=",")
    except:
      errval = DATA_READ_ERR


# read in the abscissa values
if errval == 0:
  try:
    x = np.loadtxt("abscissa_file.txt")
  except:
    try:
      x = np.loadtxt("abscissa_file.txt", delimiter=",")
    except:
      errval = ABSCISSA_READ_ERR


# read in sigma (standard deviation) values (there may be nothing here if it not applicable to your likelihood)

# run the MCMC
if errval == 0:
  if len(data) != len(x):
    errval = DATA_LENGTH_ERR

  argslist = (x, 0.65, data)

if errval == 0:
  # set up sampler
  try:
    sampler = emcee.EnsembleSampler(Nens, ndim, lnprob, args=argslist)
  except:
    errval = MCMC_INIT_ERR

  # run sampler
  try:
    sampler.run_mcmc(pos, Nmcmc+Nburnin)
    # remove burn-in and flatten
    samples = sampler.chain[:, Nburnin:, :].reshape((-1, ndim))
    lnp = np.reshape(sampler.lnprobability[:, Nburnin:].flatten(), (-1,1))
    samples = np.hstack((samples, lnp))
  except:
    errval = MCMC_RUN_ERR

  # output the posterior samples, likelihood and variables
  try:
    np.savetxt('posterior_samples.txt.gz', samples)
    fv = open('variables.txt', 'w')
    fv.write("m,c")
    fv.close()
  except:
    errval = POST_OUTPUT_ERR

  # run post-processing script
  try:
    postprocessing(samples, "m,c", x, "x", data, "fanatapan@yahoo.co.uk", "http://localhost/results/4a3182dfaaf9dfd540a677b1d9c323ed")
  except:
    errval = POST_PROCESS_ERR

success = True
if errval != 0:
  # run different script in case error codes are encountered
  errorpage(errval, "fanatapan@yahoo.co.uk", "http://localhost/results/4a3182dfaaf9dfd540a677b1d9c323ed")
  success = False

database_add_row("4a3182dfaaf9dfd540a677b1d9c323ed", "m*x+c", "m,c", 2, success)


modelfile:# import functions that can be used by the model
from numpy import pi, sin, cos, tan, exp, log, log10, log2, arccos, arcsin, arctan, arctan2, sinh, cosh, tanh, arccosh, arcsinh, arctanh
from scipy.special import erf, gamma
from scipy.misc import factorial

# define the model to fit to the data
def mymodel(m,c, x):
  
  
  return m*x+c

runcode:1



------------------------------------------------------------------



outdir:b41992563ae9c2ae059e7eccf1e03711
sampler_type:emcee
likelihood_input_type:Gaussian
variables[]:m
variables[]:x
variables[]:c
abscissa_data:1 2 3 4
input_data:5 6 7 8
theta[]:m
theta[]:c
pyfile:#!/usr/bin/env python

# import required packages
import emcee
import numpy as np
from numpy import exp, log

# import model function from separate file
from mymodel import mymodel

# import post-processing function from theonlinemcmc package
from theonlinemcmc import *

# initialise error code value
errval = 0

#MCMCWrapper args
sample = MCMCWrapper({wrapper_data}, {theta}, {variables}, {sampler_type})

# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf

  return lp + lnlike(theta, x, sigma_gauss, data)


# define the log prior function
def lnprior(theta):
  lp = 0.
  m,c = theta

  if -10 < m < 10:
    lp = 0.
  else:
    return -np.inf

  if -10 < c < 10:
    lp = 0.
  else:
    return -np.inf

  return lp


# define log likelihood function
def lnlike(theta, x, sigma_gauss, data):
  m,c = theta
  md = mymodel(m,c,x)
  return -0.5*np.sum(((md - data)/sigma_gauss)**2)


# set number of MCMC points
Nmcmc = 1000
Nburnin = 1000
Nens = 100
ndim = 2

# initialise the start ensemble points
try:
  mini = -10 + np.random.rand(Nens)*20
  cini = -10 + np.random.rand(Nens)*20
  pos = np.array([mini, cini]).T
except:
  errval = PRIOR_INIT_ERR

# read in the data
if errval == 0:
  try:
    data = np.loadtxt("data_file.txt")
  except:
    try:
      data = np.loadtxt("data_file.txt", delimiter=",")
    except:
      errval = DATA_READ_ERR


# read in the abscissa values
if errval == 0:
  try:
    x = np.loadtxt("abscissa_file.txt")
  except:
    try:
      x = np.loadtxt("abscissa_file.txt", delimiter=",")
    except:
      errval = ABSCISSA_READ_ERR


# read in sigma (standard deviation) values (there may be nothing here if it not applicable to your likelihood)

# run the MCMC
if errval == 0:
  if len(data) != len(x):
    errval = DATA_LENGTH_ERR

  argslist = (x, 0.65, data)

if errval == 0:
  # set up sampler
  try:
    sampler = emcee.EnsembleSampler(Nens, ndim, lnprob, args=argslist)
  except:
    errval = MCMC_INIT_ERR

  # run sampler
  try:
    sampler.run_mcmc(pos, Nmcmc+Nburnin)
    # remove burn-in and flatten
    samples = sampler.chain[:, Nburnin:, :].reshape((-1, ndim))
    lnp = np.reshape(sampler.lnprobability[:, Nburnin:].flatten(), (-1,1))
    samples = np.hstack((samples, lnp))
  except:
    errval = MCMC_RUN_ERR

  # output the posterior samples, likelihood and variables
  try:
    np.savetxt('posterior_samples.txt.gz', samples)
    fv = open('variables.txt', 'w')
    fv.write("m,c")
    fv.close()
  except:
    errval = POST_OUTPUT_ERR

  # run post-processing script
  try:
    postprocessing(samples, "m,c", x, "x", data, "fanatapan@yahoo.co.uk", "http://localhost/results/b41992563ae9c2ae059e7eccf1e03711")
  except:
    errval = POST_PROCESS_ERR

success = True
if errval != 0:
  # run different script in case error codes are encountered
  errorpage(errval, "fanatapan@yahoo.co.uk", "http://localhost/results/b41992563ae9c2ae059e7eccf1e03711")
  success = False

database_add_row("b41992563ae9c2ae059e7eccf1e03711", "m*x+c", "m,c", 2, success)


modelfile:# import functions that can be used by the model
from numpy import pi, sin, cos, tan, exp, log, log10, log2, arccos, arcsin, arctan, arctan2, sinh, cosh, tanh, arccosh, arcsinh, arctanh
from scipy.special import erf, gamma
from scipy.misc import factorial

# define the model to fit to the data
def mymodel(m,c, x):
  
  
  return m*x+c

runcode:1



------------------------------------------------------------------




#MCMCWrapper
sample = MCMCWrapper({wrapper_data}, {theta}, {variables}, {sampler_type})

#MCMCWrapper args
wrapper_data = {wrapper_data}theta = {theta}variables = {variables}sampler_type = {sampler_type}
# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf



------------------------------------------------------------------



outdir:5f4a68c8061f84cda37287af826aa99e
sampler_type:emcee
likelihood_input_type:Gaussian
variables[]:m
variables[]:x
variables[]:c
abscissa_data:1 2 3 4
input_data:1 2 3 4
theta[]:m
theta[]:c
pyfile:#!/usr/bin/env python

# import required packages
import emcee
import numpy as np
from numpy import exp, log

# import model function from separate file
from mymodel import mymodel

# import post-processing function from theonlinemcmc package
from theonlinemcmc import *

# initialise error code value
errval = 0

#MCMCWrapper
sample = MCMCWrapper({wrapper_data}, {theta}, {variables}, {sampler_type})

#MCMCWrapper args
wrapper_data = {wrapper_data}theta = {theta}variables = {variables}sampler_type = {sampler_type}
{sampler_type}{theta}{variables}{sampler_type}
# define the log posterior function
def lnprob(theta, x, sigma_gauss, data):
  lp = lnprior(theta)
  if not np.isfinite(lp):
    return -np.inf

  return lp + lnlike(theta, x, sigma_gauss, data)


# define the log prior function
def lnprior(theta):
  lp = 0.
  m,c = theta

  if -10 < m < 10:
    lp = 0.
  else:
    return -np.inf

  if -10 < c < 10:
    lp = 0.
  else:
    return -np.inf

  return lp


# define log likelihood function
def lnlike(theta, x, sigma_gauss, data):
  m,c = theta
  md = mymodel(m,c,x)
  return -0.5*np.sum(((md - data)/sigma_gauss)**2)


# set number of MCMC points
Nmcmc = 1000
Nburnin = 1000
Nens = 100
ndim = 2

# initialise the start ensemble points
try:
  mini = -10 + np.random.rand(Nens)*20
  cini = -10 + np.random.rand(Nens)*20
  pos = np.array([mini, cini]).T
except:
  errval = PRIOR_INIT_ERR

# read in the data
if errval == 0:
  try:
    data = np.loadtxt("data_file.txt")
  except:
    try:
      data = np.loadtxt("data_file.txt", delimiter=",")
    except:
      errval = DATA_READ_ERR


# read in the abscissa values
if errval == 0:
  try:
    x = np.loadtxt("abscissa_file.txt")
  except:
    try:
      x = np.loadtxt("abscissa_file.txt", delimiter=",")
    except:
      errval = ABSCISSA_READ_ERR


# read in sigma (standard deviation) values (there may be nothing here if it not applicable to your likelihood)

# run the MCMC
if errval == 0:
  if len(data) != len(x):
    errval = DATA_LENGTH_ERR

  argslist = (x, 0.65, data)

if errval == 0:
  # set up sampler
  try:
    sampler = emcee.EnsembleSampler(Nens, ndim, lnprob, args=argslist)
  except:
    errval = MCMC_INIT_ERR

  # run sampler
  try:
    sampler.run_mcmc(pos, Nmcmc+Nburnin)
    # remove burn-in and flatten
    samples = sampler.chain[:, Nburnin:, :].reshape((-1, ndim))
    lnp = np.reshape(sampler.lnprobability[:, Nburnin:].flatten(), (-1,1))
    samples = np.hstack((samples, lnp))
  except:
    errval = MCMC_RUN_ERR

  # output the posterior samples, likelihood and variables
  try:
    np.savetxt('posterior_samples.txt.gz', samples)
    fv = open('variables.txt', 'w')
    fv.write("m,c")
    fv.close()
  except:
    errval = POST_OUTPUT_ERR

  # run post-processing script
  try:
    postprocessing(samples, "m,c", x, "x", data, "fanatapan@yahoo.co.uk", "http://localhost/results/5f4a68c8061f84cda37287af826aa99e")
  except:
    errval = POST_PROCESS_ERR

success = True
if errval != 0:
  # run different script in case error codes are encountered
  errorpage(errval, "fanatapan@yahoo.co.uk", "http://localhost/results/5f4a68c8061f84cda37287af826aa99e")
  success = False

  # run post-processing script
  try:
    MCMCWrapper(wrapper_data, "m,c", m,x,c, "emcee")
database_add_row("5f4a68c8061f84cda37287af826aa99e", "m*x+c", "m,c", 2, success)


modelfile:# import functions that can be used by the model
from numpy import pi, sin, cos, tan, exp, log, log10, log2, arccos, arcsin, arctan, arctan2, sinh, cosh, tanh, arccosh, arcsinh, arctanh
from scipy.special import erf, gamma
from scipy.misc import factorial

# define the model to fit to the data
def mymodel(m,c, x):
  
  
  return m*x+c

runcode:1


------------------------------------------------------------------

  # run post-processing script
  try:
    MCMCWrapper(1 2 3 4, "m,c", m,x,c, "emcee")
database_add_row("6f45520e0bf7e366b59e9fba3b80dcc8", "m*x+c", "m,c", 2, success)
